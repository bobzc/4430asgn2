
main(argv){
	prot = argv[1]
	milestone = argv[2];
	while(1){
		creat_socket();
		accept()
		create_thread and run();
	}
}

run_milestone_1(int fd){
	HTTP_HEADER header;
	char *request;

	receive_HTTP_request(fd, request);
	parse_HTTP_request_header(request, &header);

	change_HTTP_header(request);   // connection: close; proxy-connection: close;

	forward_HTTP_request(request, header);

	char *response;
	receive_HTTP_response(response);
	forward_HTTP_response(fd, response);
}

run_milestone_2(){
	keep_alive = true;
	while(keep_alive){
		receive_HTTP_request() & if timeout: break;
		parse_HTTP_request_header();
		forward_HTTP_request();
		receive_HTTP_response();
		forward_HTTP_response();
	}
}

run_milestone_3(){
	keep_alive = true;
	while(keep_alive){	
		receive_HTTP_request() && if timeout: break;
		parse_HTTP_request_header();
		if(is_cached(url) && method == "GET"){
			if(!has_if_modified_since){
				IMS_time = 0;
			}
			if(has_cache_control){
				insert_into_header(max(last_modified_time(url), IMS_time));
			}else{
				if(IMS_time > last_modified_time(url)){
					return_status_code(304);
				}else{
					return_status_code(200); 
					return_cache(url);
				}
			}
		}
		forward_HTTP_request();
		receive_HTTP_response();
		parse_HTTP_response_header();
		if(status_code == 200){
			cache(web_object);
		}else if(status_code == 304){
			if( IMS_time < last_modified_time(url) && has_cache_control){
				return_status_code(200);
				return_cache(url);	
			}else{
				return_status_code(304);
			}
			continue;
		}
		forward_HTTP_response();
	}
}

sig_handler(SIGPIPE){

}


